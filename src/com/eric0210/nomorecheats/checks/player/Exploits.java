package com.eric0210.nomorecheats.checks.player;

import java.util.ArrayList;

import com.eric0210.nomorecheats.AntiCheat;
import com.eric0210.nomorecheats.api.Check;
import com.eric0210.nomorecheats.api.Violation;
import com.eric0210.nomorecheats.api.event.EventInfo;
import com.eric0210.nomorecheats.api.event.EventListener;
import com.eric0210.nomorecheats.api.event.EventManager;
import com.eric0210.nomorecheats.api.packet.PacketInEvent;
import com.eric0210.nomorecheats.api.packet.PacketListener;
import com.eric0210.nomorecheats.api.packet.PacketManager;
import com.eric0210.nomorecheats.api.packet.PacketOutEvent;
import com.eric0210.nomorecheats.api.packet.PacketTypeIn;
import com.eric0210.nomorecheats.api.packet.listeners.PlayerConnectionFilter;
import com.eric0210.nomorecheats.api.packet.packets.in.ChatPacket;
import com.eric0210.nomorecheats.api.packet.packets.in.CustomPayloadPacket;
import com.eric0210.nomorecheats.api.packet.packets.in.HeldItemSlotPacket;
import com.eric0210.nomorecheats.api.packet.packets.in.UpdateSignPacket;
import com.eric0210.nomorecheats.api.packet.packets.in.UseEntityPacket;
import com.eric0210.nomorecheats.api.util.InternalUtils;
import com.eric0210.nomorecheats.api.util.NMS;

import net.minecraft.server.v1_7_R4.Entity;
import net.minecraft.server.v1_7_R4.EntityArrow;
import net.minecraft.server.v1_7_R4.EntityEnderPearl;
import net.minecraft.server.v1_7_R4.EntityEnderSignal;
import net.minecraft.server.v1_7_R4.EntityExperienceOrb;
import net.minecraft.server.v1_7_R4.EntityFishingHook;
import net.minecraft.server.v1_7_R4.EntityItem;
import net.minecraft.server.v1_7_R4.EntityLiving;
import net.minecraft.server.v1_7_R4.EntitySnowball;
import net.minecraft.server.v1_7_R4.MinecraftServer;
import net.minecraft.server.v1_7_R4.NBTTagCompound;
import net.minecraft.server.v1_7_R4.NBTTagList;
import net.minecraft.server.v1_7_R4.PacketDataSerializer;
import net.minecraft.server.v1_7_R4.PlayerInventory;
import net.minecraft.server.v1_7_R4.SharedConstants;
import net.minecraft.server.v1_7_R4.WorldServer;
import net.minecraft.util.io.netty.buffer.Unpooled;

import org.apache.commons.lang.StringUtils;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.Event;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;

public class Exploits extends Check implements EventListener, PacketListener
{
	private boolean kick = false;

	public Exploits()
	{
		super("Exploits");
		EventManager.onPlayerInteract.add(new EventInfo(this, 0));
		EventManager.onPlayerEditBook.add(new EventInfo(this, 1));
		PacketManager.addListener(this);
		this.kick = getConfig().getValue("Kick", false);
	}

	@Override
	public void onEvent(Event ev, int id)
	{
		switch (id)
		{
			case 0:
				PlayerInteractEvent e1 = (PlayerInteractEvent) ev;
				Player player = e1.getPlayer();
				ItemStack item = e1.getItem();
				if (player == null || item == null)
					return;
				if (item.getType() == Material.BOOK_AND_QUILL || item.getType() == Material.WRITTEN_BOOK)
				{
					if (item.getEnchantments().size() > 0)
					{
						for (Enchantment ench : item.getEnchantments().keySet())
							item.removeEnchantment(ench);
						e1.setCancelled(true);
						suspect(player, 1, "interact-book");
					}
				}
				break;
			case 1:
				PlayerEditBookEvent e2 = (PlayerEditBookEvent) ev;
				BookMeta meta = e2.getNewBookMeta();
				if (meta != null)
				{
					if (meta.getEnchants().size() > 0)
					{
						for (Enchantment ench : meta.getEnchants().keySet())
							meta.removeEnchant(ench);
						e2.setNewBookMeta(meta);
						e2.setCancelled(true);
						suspect(e2.getPlayer(), 1, "edit-book");
					}
				}
				break;
		}
	}

	@Override
	public void onPacketIn(PacketInEvent pe)
	{
		Player p = pe.getPlayer();
		ArrayList<String> violationTags = new ArrayList<>();
		if (pe.getPacket().getType() == PacketTypeIn.USE_ENTITY)
		{
			UseEntityPacket packet = (UseEntityPacket) pe.getPacket();
			WorldServer w = MinecraftServer.getServer().getWorldServer(NMS.asNMS(p.getWorld()).dimension);
			Entity ent = w.getEntity(packet.getEntityId());
			if (ent == null)
				return;
			if (ent instanceof EntityLiving)
			{
				if (packet.getEntityId() == p.getEntityId())
				{
					violationTags.add("self-interact");
					if (this.kick)
						p.kickPlayer(AntiCheat.antiCheat().getConfiguration().IngamePrefix() + "Cannot interact with self!");
					pe.setCancelled(true);
				}
				else if (ent instanceof EntityItem || ent instanceof EntityExperienceOrb || ent instanceof EntityFishingHook || ent instanceof EntityEnderPearl || ent instanceof EntityEnderSignal || ent instanceof EntitySnowball || ent instanceof EntityArrow)
				{
					violationTags.add("interact-target");
					if (this.kick)
						p.kickPlayer(AntiCheat.antiCheat().getConfiguration().IngamePrefix() + "Attempting to attack an invalid entity");
					pe.setCancelled(true);
				}
			}
		}
		if (pe.getPacket().getType() == PacketTypeIn.CHAT)
		{
			ChatPacket packet = (ChatPacket) pe.getPacket();
			String msg = packet.getMessage();
			msg = StringUtils.normalizeSpace(msg);
			StringBuilder fixedmsg = new StringBuilder();
			boolean flag = false;
			for (int i = 0; i < msg.length(); ++i)
			{
				if (SharedConstants.isAllowedChatCharacter(msg.charAt(i)))
					fixedmsg.append(msg.charAt(i));
				else
				{
					flag = true;
					if (this.kick)
					{
						p.kickPlayer(AntiCheat.antiCheat().getConfiguration().IngamePrefix() + "Illegal character in " + (packet.getMessage().startsWith("/") ? "command" : "chat"));
						pe.setCancelled(true);
					}
					else
						fixedmsg.append("?");
				}
			}
			if (flag)
				violationTags.add("chat(\"" + msg + "\")");
			InternalUtils.setField(packet, "message", fixedmsg.toString());
		}
		if (pe.getPacket().getType() == PacketTypeIn.HELD_ITEM_SLOT)
		{
			HeldItemSlotPacket packet = (HeldItemSlotPacket) pe.getPacket();
			int slot = packet.getIndex();
			if (slot < 0 || slot > PlayerInventory.getHotbarSize())
			{
				violationTags.add("hotbar(" + slot + ")");
				if (this.kick)
					p.kickPlayer(AntiCheat.antiCheat().getConfiguration().IngamePrefix() + "Illegal hotbar selection: " + slot);
				pe.setCancelled(true);
			}
		}
		if (pe.getPacket().getType() == PacketTypeIn.CUSTOM_PAYLOAD)
		{
			CustomPayloadPacket packet = (CustomPayloadPacket) pe.getPacket();
			if (packet.getTag().equals("MC|BEdit") || packet.getTag().equals("MC|BSign")) // book edit/sign exploits
			{
				try
				{
					PacketDataSerializer serializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packet.getData()), PlayerConnectionFilter.instance.networkManager.getVersion());
					net.minecraft.server.v1_7_R4.ItemStack is = serializer.c();
					if (is == null)
						return;
					if (!is.hasTag())
					{
						violationTags.add("payload(no tag)");
						pe.setCancelled(true);
					}
					NBTTagCompound nbt = is.getTag();
					if (!nbt.hasKeyOfType("pages", 9))
					{
						violationTags.add("payload(no pages)");
						pe.setCancelled(true);
					}
					NBTTagList list = nbt.getList("pages", 8);
					if (list.size() > 50)
					{
						violationTags.add("payload(too many pages " + list.size() + ")");
						pe.setCancelled(true);
					}
					for (int i = 0; i < list.size(); i++)
					{
						String str = list.getString(i);
						if (str == null)
						{
							violationTags.add("payload(empty page)");
							pe.setCancelled(true);
						}
						else if (str.length() > 256)
						{
							violationTags.add("payload(too many chars in a page " + str.length() + ")");
							pe.setCancelled(true);
						}
					}
					if (packet.getTag().equals("MC|BSign"))
					{
						if (!nbt.hasKeyOfType("title", 8))
						{
							violationTags.add("payload(no title)");
							pe.setCancelled(true);
						}
						String string = nbt.getString("title");
						if (string == null || string.length() > 16)
						{
							violationTags.add("payload(illegal title " + (string == null ? "null" : string) + ")");
							pe.setCancelled(true);
						}
						if (!nbt.hasKeyOfType("author", 8))
						{
							violationTags.add("payload(no author)");
							pe.setCancelled(true);
						}
					}
				}
				catch (Exception ex)
				{
					violationTags.add("payload(payload parser exception " + ex.getClass().getSimpleName() + ": " + ex.getMessage() + " caught)");
					pe.setCancelled(true);
				}
			}
		}
		if (pe.getPacket().getType() == PacketTypeIn.UPDATE_SIGN)
		{
			UpdateSignPacket packet = (UpdateSignPacket) pe.getPacket();
			for (String str : packet.getLines())
			{
				System.out.println("sign line " + str);
			}
		}
		if (!violationTags.isEmpty())
		{
			suspect(p, 1, Violation.convertTagListtoTag(violationTags));
		}
	}

	@Override
	public void onPacketOut(PacketOutEvent e)
	{
		// TODO Auto-generated method stub
	}
}
